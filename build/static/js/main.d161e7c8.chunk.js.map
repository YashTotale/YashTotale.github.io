{"version":3,"sources":["Redux/selectors/display.selectors.ts","App.tsx","Theme.tsx","Redux/reducers/contact.reducers.ts","Redux/reducers/display.reducers.ts","Redux/store/index.tsx","serviceWorker.ts","index.tsx","Components/Reusable/Loading/Page.tsx","Redux/selectors/contact.selectors.ts","Redux/actions/contact.actions.ts","Utils/colors.ts","Utils/links.ts","Redux/actions/display.actions.ts","Redux/actions/index.ts","Utils/constants.ts"],"names":["getIsDarkMode","state","display","isDarkMode","getIsNavBtnsMenuOpen","isNavBtnsMenuOpen","getPrimaryColor","colors","primary","getSecondaryColor","secondary","getColors","createSelector","getPrimaryShade","shades","getSecondaryShade","getShades","getPalette","getSnackbarMessage","snackBar","message","getIsSnackbarOpen","isOpen","getSnackbarSeverity","severity","getSnackbarColor","color","SnackBar","lazy","NavBar","Footer","Home","Projects","Tags","Experience","Colors","useStyles","makeStyles","theme","pageContainer","flexDirection","alignItems","justifyContent","paddingBottom","FOOTER_HEIGHT","Head","props","useTheme","id","rel","type","href","palette","DARK_LOGO","LIGHT_LOGO","Routes","path","exact","hot","module","classes","reCaptchaKey","process","fallback","className","Theme","children","dispatch","useDispatch","prefersDarkMode","useMediaQuery","useSelector","toggleDarkMode","primaryColor","secondaryColor","primaryShade","secondaryShade","React","useMemo","createMuiTheme","overrides","MuiTooltip","tooltip","fontFamily","fontWeight","fontSize","backgroundColor","MuiTab","wrapper","MuiButton","label","MuiAlert","MuiChip","avatarColorSecondary","avatarColorPrimary","MuiSlider","root","padding","typography","main","spacing","initialContactState","name","email","bugs","rating","loading","success","initialDisplayState","defaultColors","defaultShades","reducers","action","payload","TOGGLE_DARK_MODE","TOGGLE_NAV_BTNS_MENU","CHANGE_COLORS","scheme","CHANGE_SHADE","shade","SET_SNACKBAR_MESSAGE","HANDLE_SNACKBAR_CLOSE","contact","SET_CONTACT_NAME","SET_CONTACT_MESSAGE","SET_CONTACT_EMAIL","SET_CONTACT_RATING","SET_CONTACT_BUGS","SET_CONTACT_LOADING","SET_CONTACT_SUCCESS","SET_CONTACT","rootReducer","combineReducers","persistConfig","key","storage","stateReconciler","autoMergeLevel2","persistedReducer","persistReducer","configuredStore","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","ReduxStore","store","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","loadingSkeleton","navSkeleton","width","height","marginBottom","mainSkeleton","rowSkeleton","cellSkeleton","flexGrow","margin","boxSkeleton","bioSkeleton","marginTop","circleSkeleton","marginRight","bioTextSkeleton","textSkeleton","Loading","variant","Array","map","x","i","getContact","setContactLoading","setContactSuccess","setContact","schemes","resetMessage","toCssColor","replace","charAt","toLowerCase","toColor","cssColor","str","toUpperCase","getMuiColor","colorsObject","getTextColor","white","common","black","getContrastRatio","SOURCE_CODE","LINKEDIN_URL","GITHUB_URL","EMAIL_URL","PROFILE_PIC","ABOUT_ME_BACKGROUND","toggleNavBtnsMenu","changeColors","changeShade","setSnackbarMessage","handleSnackbarClose","PROFILE_PIC_RATIO","EMAIL_REGEX"],"mappings":"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","file":"static/js/main.d161e7c8.chunk.js","sourcesContent":["import { State } from \"./index\";\nimport { createSelector } from \"reselect\";\n\nexport const getIsDarkMode = (state: State) => state.display.isDarkMode;\n\nexport const getIsNavBtnsMenuOpen = (state: State) =>\n  state.display.isNavBtnsMenuOpen;\n\nexport const getPrimaryColor = (state: State) => state.display.colors.primary;\n\nexport const getSecondaryColor = (state: State) =>\n  state.display.colors.secondary;\n\nexport const getColors = createSelector(\n  getPrimaryColor,\n  getSecondaryColor,\n  (primary, secondary) => [primary, secondary]\n);\n\nexport const getPrimaryShade = (state: State) => state.display.shades.primary;\n\nexport const getSecondaryShade = (state: State) =>\n  state.display.shades.secondary;\n\nexport const getShades = createSelector(\n  getPrimaryShade,\n  getSecondaryShade,\n  (primary, secondary) => [primary, secondary]\n);\n\nexport const getPalette = createSelector(\n  getColors,\n  getShades,\n  (colors, shades) => [...colors, ...shades]\n);\n\nexport const getSnackbarMessage = (state: State) =>\n  state.display.snackBar.message;\n\nexport const getIsSnackbarOpen = (state: State) =>\n  state.display.snackBar.isOpen;\n\nexport const getSnackbarSeverity = (state: State) =>\n  state.display.snackBar.severity;\n\nexport const getSnackbarColor = (state: State) => state.display.snackBar.color;\n","//React Imports\nimport { hot } from \"react-hot-loader\";\nimport React, { lazy, Suspense } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { GoogleReCaptchaProvider } from \"react-google-recaptcha-v3\";\nimport Loading from \"./Components/Reusable/Loading/Page\";\n\n//Utils\nimport { DARK_LOGO, LIGHT_LOGO } from \"./Utils/links\";\nimport { FOOTER_HEIGHT } from \"./Utils/constants\";\n\n//Material UI Imports\nimport Theme from \"./Theme\";\nimport { makeStyles, Theme as ThemeProps, useTheme } from \"@material-ui/core\";\n\n//Router Imports\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n// Lazy Imports\nconst SnackBar = lazy(() => import(\"./Components/Custom/SnackBar\"));\nconst NavBar = lazy(() => import(\"./Components/Custom/NavBar\"));\nconst Footer = lazy(() => import(\"./Components/Custom/Footer\"));\n\nconst Home = lazy(() => import(\"./Pages/Home\"));\nconst Projects = lazy(() => import(\"./Pages/Projects\"));\nconst Tags = lazy(() => import(\"./Pages/Tags\"));\nconst Experience = lazy(() => import(\"./Pages/Experience\"));\nconst Colors = lazy(() => import(\"./Pages/Colors\"));\n\nconst useStyles = makeStyles((theme: ThemeProps) => ({\n  pageContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingBottom: FOOTER_HEIGHT,\n  },\n}));\n\nconst App: React.FC = (props) => {\n  const classes = useStyles();\n  return (\n    <Router>\n      <Theme>\n        <Head />\n        <GoogleReCaptchaProvider\n          reCaptchaKey={process.env.REACT_APP_RECAPTCHA_KEY}\n        >\n          <Suspense fallback={<Loading />}>\n            <div className={classes.pageContainer}>\n              <NavBar />\n              <Routes />\n              <SnackBar />\n            </div>\n            <Footer />\n          </Suspense>\n        </GoogleReCaptchaProvider>\n      </Theme>\n    </Router>\n  );\n};\n\nconst Head: React.FC = (props) => {\n  const theme = useTheme();\n  return (\n    <Helmet>\n      <title>Yash Totale</title>\n      <link\n        id=\"icon\"\n        rel=\"icon\"\n        type=\"image/jpeg\"\n        href={theme.palette.type === \"dark\" ? DARK_LOGO : LIGHT_LOGO}\n      ></link>\n    </Helmet>\n  );\n};\n\nconst Routes: React.FC = (props) => {\n  return (\n    <Switch>\n      <Route path=\"/projects/:id?\">\n        <Projects />\n      </Route>\n      <Route path=\"/experience\">\n        <Experience />\n      </Route>\n      <Route path=\"/tags/:id?\">\n        <Tags />\n      </Route>\n      <Route path=\"/colors\">\n        <Colors />\n      </Route>\n      <Route path=\"/home\">\n        <Home />\n      </Route>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n    </Switch>\n  );\n};\n\n//Hot Loader reloads the app when you save changes\nexport default hot(module)(App);\n","//React Imports\nimport React from \"react\";\n\n//Material UI Imports\nimport {\n  colors,\n  useMediaQuery,\n  createMuiTheme,\n  ThemeProvider,\n  CssBaseline,\n} from \"@material-ui/core\";\nimport LabOverrides from \"@material-ui/lab/themeAugmentation\";\n\n//Redux Imports\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getIsDarkMode, getPalette } from \"./Redux/selectors\";\nimport { toggleDarkMode } from \"./Redux/actions\";\n\nconst Theme: React.FC = ({ children }) => {\n  const dispatch = useDispatch();\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const isDarkMode = useSelector(getIsDarkMode);\n  if (isDarkMode === null && prefersDarkMode) {\n    dispatch(toggleDarkMode(prefersDarkMode));\n  }\n\n  const [\n    primaryColor,\n    secondaryColor,\n    primaryShade,\n    secondaryShade,\n  ] = useSelector(getPalette);\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        overrides: {\n          MuiTooltip: {\n            tooltip: {\n              fontFamily: \"Roboto, Arial, sans-serif\",\n              fontWeight: 600,\n              fontSize: \"0.72rem\",\n              backgroundColor: \"rgb(0, 0, 0, 0.76)\",\n            },\n          },\n          MuiTab: {\n            wrapper: {\n              fontFamily: \"Roboto, Arial, sans-serif\",\n              fontWeight: 600,\n              fontSize: \"0.9rem\",\n            },\n          },\n          MuiButton: {\n            label: {\n              fontFamily: \"Roboto, Arial, sans-serif\",\n              fontWeight: 600,\n            },\n          },\n          MuiAlert: {\n            message: {\n              fontFamily: \"Roboto, Arial, sans-serif\",\n              fontWeight: 600,\n            },\n          },\n          MuiChip: {\n            label: {\n              fontSize: \"0.875rem\",\n            },\n            avatarColorSecondary: {\n              backgroundColor: \"inherit\",\n            },\n            avatarColorPrimary: {\n              backgroundColor: \"inherit\",\n            },\n          },\n          MuiSlider: {\n            root: {\n              [\"@media (pointer: coarse)\"]: {\n                padding: \"auto\",\n              },\n            },\n          },\n        },\n        typography: {\n          fontFamily: \"Palatino, Georgia, Serif\",\n        },\n        palette: {\n          type: isDarkMode ? \"dark\" : \"light\",\n          primary: {\n            //@ts-ignore\n            main: colors[primaryColor][primaryShade],\n          },\n          secondary: {\n            //@ts-ignore\n            main: colors[secondaryColor][secondaryShade],\n          },\n        },\n        spacing: 8,\n      }),\n    [isDarkMode, primaryColor, secondaryColor, primaryShade, secondaryShade]\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      {children}\n    </ThemeProvider>\n  );\n};\n\nexport default Theme;\n","import { AnyAction } from \"redux\";\nimport { Rating } from \"../../Utils/types\";\nimport {\n  SET_CONTACT_NAME,\n  SET_CONTACT_MESSAGE,\n  SET_CONTACT_EMAIL,\n  SET_CONTACT_RATING,\n  SET_CONTACT_BUGS,\n  SET_CONTACT_LOADING,\n  SET_CONTACT_SUCCESS,\n  SET_CONTACT,\n} from \"../actions/contact.actions\";\n\nexport interface ContactState {\n  name: string;\n  message: string;\n  email: string;\n  bugs: string;\n  rating: Rating | null;\n  loading: boolean;\n  success: boolean | null;\n}\n\nexport const initialContactState: ContactState = {\n  name: \"\",\n  message: \"\",\n  email: \"\",\n  bugs: \"\",\n  rating: null,\n  loading: false,\n  success: null,\n};\n\nexport const contactReducer = (\n  state = initialContactState,\n  action: AnyAction\n): typeof initialContactState => {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_CONTACT_NAME: {\n      const { name } = payload;\n      return { ...state, name };\n    }\n    case SET_CONTACT_MESSAGE: {\n      const { message } = payload;\n      return { ...state, message };\n    }\n    case SET_CONTACT_EMAIL: {\n      const { email } = payload;\n      return { ...state, email };\n    }\n    case SET_CONTACT_RATING: {\n      const { rating } = payload;\n      return { ...state, rating };\n    }\n    case SET_CONTACT_BUGS: {\n      const { bugs } = payload;\n      return { ...state, bugs };\n    }\n    case SET_CONTACT_LOADING: {\n      const { loading } = payload;\n      return { ...state, loading };\n    }\n    case SET_CONTACT_SUCCESS: {\n      const { success } = payload;\n      return { ...state, success };\n    }\n    case SET_CONTACT: {\n      const { contact } = payload;\n      return { ...state, ...contact };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport const sampleContactState: ContactState = {\n  ...initialContactState,\n};\n","import { AnyAction } from \"redux\";\nimport {\n  TOGGLE_DARK_MODE,\n  TOGGLE_NAV_BTNS_MENU,\n  CHANGE_COLORS,\n  CHANGE_SHADE,\n  SET_SNACKBAR_MESSAGE,\n  HANDLE_SNACKBAR_CLOSE,\n} from \"../actions/display.actions\";\nimport { defaultColors, defaultShades } from \"../../Utils/colors\";\nimport { Color } from \"@material-ui/lab\";\n\nexport interface DisplayState {\n  isDarkMode: boolean | null;\n  isNavBtnsMenuOpen: boolean;\n  colors: typeof defaultColors;\n  shades: typeof defaultShades;\n  snackBar: {\n    isOpen: boolean;\n    message: string;\n    severity: Color;\n    color: string | null;\n  };\n}\n\nexport const initialDisplayState: DisplayState = {\n  isDarkMode: null,\n  isNavBtnsMenuOpen: false,\n  colors: defaultColors,\n  shades: defaultShades,\n  snackBar: {\n    isOpen: false,\n    message: \"\",\n    severity: \"info\",\n    color: null,\n  },\n};\n\nexport const displayReducer = (\n  state = initialDisplayState,\n  action: AnyAction\n): typeof initialDisplayState => {\n  const { type, payload } = action;\n  switch (type) {\n    case TOGGLE_DARK_MODE: {\n      const { isDarkMode } = payload;\n      return { ...state, isDarkMode: isDarkMode ?? !state.isDarkMode };\n    }\n    case TOGGLE_NAV_BTNS_MENU: {\n      const { isOpen } = payload;\n      return {\n        ...state,\n        isNavBtnsMenuOpen: isOpen ?? !state.isNavBtnsMenuOpen,\n      };\n    }\n    case CHANGE_COLORS: {\n      const { scheme, color } = payload;\n      return { ...state, colors: { ...state.colors, [scheme]: color } };\n    }\n    case CHANGE_SHADE: {\n      const { shade, scheme } = payload;\n      return { ...state, shades: { ...state.shades, [scheme]: shade } };\n    }\n    case SET_SNACKBAR_MESSAGE: {\n      const { message, severity, color } = payload;\n      return { ...state, snackBar: { message, severity, color, isOpen: true } };\n    }\n    case HANDLE_SNACKBAR_CLOSE: {\n      return { ...state, snackBar: { ...state.snackBar, isOpen: false } };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport const sampleDisplayState: DisplayState = {\n  ...initialDisplayState,\n};\n","//React Imports\nimport React from \"react\";\nimport Loading from \"../../Components/Reusable/Loading/Page\";\n\n// Redux Imports\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\n\n//Redux Persist Imports\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport { PersistGate } from \"redux-persist/lib/integration/react\";\nimport storage from \"redux-persist/lib/storage\";\nimport autoMergeLevel2 from \"redux-persist/lib/stateReconciler/autoMergeLevel2\";\n\n//Redux Devtools Imports\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\n//Redux Thunk Imports\nimport thunk from \"redux-thunk\";\n\n//Reducer Imports\nimport { display, contact } from \"../reducers\";\n\nconst reducers = {\n  display,\n  contact,\n};\n\nconst rootReducer = combineReducers(reducers);\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  stateReconciler: autoMergeLevel2,\n};\n\nconst persistedReducer = persistReducer<any>(persistConfig, rootReducer);\n\nconst configuredStore = createStore(\n  persistedReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst persistor = persistStore(configuredStore);\n\nconst ReduxStore: React.FC = (props) => {\n  return (\n    <Provider store={configuredStore}>\n      <PersistGate loading={<Loading />} persistor={persistor}>\n        {props.children}\n      </PersistGate>\n    </Provider>\n  );\n};\n\nexport default ReduxStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//React Imports\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n//Redux Imports\nimport ReduxStore from \"./Redux/store\";\n\n//Service Worker Imports\nimport { register } from \"./serviceWorker\";\n\nReactDOM.render(\n  <ReduxStore>\n    <App />\n  </ReduxStore>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nregister();\n","//React Imports\nimport React from \"react\";\n\n//Material UI Imports\nimport { makeStyles, Theme } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  loadingSkeleton: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  navSkeleton: {\n    width: \"100vw\",\n    height: \"7vmin\",\n    marginBottom: \"3%\",\n  },\n  mainSkeleton: {\n    width: \"80vw\",\n    height: \"40vmin\",\n    marginBottom: \"3%\",\n  },\n  rowSkeleton: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"80vw\",\n    height: \"40vmin\",\n  },\n  cellSkeleton: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    flexGrow: 1,\n    width: \"33%\",\n    height: \"100%\",\n    margin: \"0px 10px\",\n  },\n  boxSkeleton: {\n    height: \"60%\",\n    width: \"100%\",\n  },\n  bioSkeleton: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\",\n    marginTop: \"5%\",\n  },\n  circleSkeleton: {\n    height: 0,\n    paddingBottom: \"20%\",\n    marginRight: \"2%\",\n    width: \"20%\",\n  },\n  bioTextSkeleton: {\n    flexGrow: 1,\n    height: \"50%\",\n  },\n  textSkeleton: {\n    width: \"100%\",\n    height: \"5%\",\n    marginTop: \"5%\",\n  },\n}));\n\nconst Loading: React.FC = (props) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <div className={classes.loadingSkeleton}>\n        <Skeleton variant=\"rect\" className={classes.navSkeleton} />\n        <Skeleton className={classes.mainSkeleton} variant=\"rect\" />\n        <div className={classes.rowSkeleton}>\n          {[...Array(3)].map((x, i) => (\n            <div key={i} className={classes.cellSkeleton}>\n              <Skeleton className={classes.boxSkeleton} variant=\"rect\" />\n              {[...Array(4)].map((x, i) => {\n                return i ? (\n                  <Skeleton\n                    key={i}\n                    variant=\"text\"\n                    className={classes.textSkeleton}\n                  />\n                ) : (\n                  <div key={i} className={classes.bioSkeleton}>\n                    <Skeleton\n                      variant=\"circle\"\n                      className={classes.circleSkeleton}\n                    />\n                    <Skeleton\n                      variant=\"text\"\n                      className={classes.bioTextSkeleton}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Loading;\n","import { State } from \"./index\";\n\nexport const getContactName = (state: State) => state.contact.name;\n\nexport const getContactMessage = (state: State) => state.contact.message;\n\nexport const getContactEmail = (state: State) => state.contact.email;\n\nexport const getContactRating = (state: State) => state.contact.rating;\n\nexport const getContactBugs = (state: State) => state.contact.bugs;\n\nexport const getContactLoading = (state: State) => state.contact.loading;\n\nexport const getContactSuccess = (state: State) => state.contact.success;\n\nexport const getContact = (state: State) => state.contact;\n","import { Inputs } from \"../../Components/Custom/ContactForm\";\nimport { Rating } from \"../../Utils/types\";\nexport interface SetContactNamePayload {\n  type: typeof SET_CONTACT_NAME;\n  payload: {\n    name: string;\n  };\n}\n\nexport const SET_CONTACT_NAME = \"SET_CONTACT_NAME\";\nexport const setContactName = (name: string): SetContactNamePayload => ({\n  type: SET_CONTACT_NAME,\n  payload: { name },\n});\n\nexport interface SetContactMessagePayload {\n  type: typeof SET_CONTACT_MESSAGE;\n  payload: {\n    message: string;\n  };\n}\n\nexport const SET_CONTACT_MESSAGE = \"SET_CONTACT_MESSAGE\";\nexport const setContactMessage = (\n  message: string\n): SetContactMessagePayload => ({\n  type: SET_CONTACT_MESSAGE,\n  payload: { message },\n});\n\nexport interface SetContactEmailPayload {\n  type: typeof SET_CONTACT_EMAIL;\n  payload: {\n    email: string;\n  };\n}\n\nexport const SET_CONTACT_EMAIL = \"SET_CONTACT_EMAIL\";\nexport const setContactEmail = (email: string): SetContactEmailPayload => ({\n  type: SET_CONTACT_EMAIL,\n  payload: { email },\n});\n\nexport interface SetContactRatingPayload {\n  type: typeof SET_CONTACT_RATING;\n  payload: {\n    rating: Rating;\n  };\n}\n\nexport const SET_CONTACT_RATING = \"SET_CONTACT_RATING\";\nexport const setContactRating = (rating: Rating): SetContactRatingPayload => ({\n  type: SET_CONTACT_RATING,\n  payload: {\n    rating,\n  },\n});\n\nexport interface SetContactBugsPayload {\n  type: typeof SET_CONTACT_BUGS;\n  payload: {\n    bugs: string;\n  };\n}\n\nexport const SET_CONTACT_BUGS = \"SET_CONTACT_BUGS\";\nexport const setContactBugs = (bugs: string): SetContactBugsPayload => ({\n  type: SET_CONTACT_BUGS,\n  payload: {\n    bugs,\n  },\n});\n\nexport interface SetContactLoadingPayload {\n  type: typeof SET_CONTACT_LOADING;\n  payload: {\n    loading: boolean;\n  };\n}\n\nexport const SET_CONTACT_LOADING = \"SET_CONTACT_LOADING\";\nexport const setContactLoading = (\n  loading: boolean\n): SetContactLoadingPayload => ({\n  type: SET_CONTACT_LOADING,\n  payload: { loading },\n});\n\nexport interface SetContactSuccessPayload {\n  type: typeof SET_CONTACT_SUCCESS;\n  payload: {\n    success: boolean | null;\n  };\n}\n\nexport const SET_CONTACT_SUCCESS = \"SET_CONTACT_SUCCESS\";\nexport const setContactSuccess = (\n  success: boolean | null\n): SetContactSuccessPayload => ({\n  type: SET_CONTACT_SUCCESS,\n  payload: { success },\n});\n\nexport interface SetContactPayload {\n  type: typeof SET_CONTACT;\n  payload: { contact: Inputs };\n}\n\nexport const SET_CONTACT = \"SET_CONTACT\";\nexport const setContact = (contact: Inputs): SetContactPayload => ({\n  type: SET_CONTACT,\n  payload: { contact },\n});\n","import {\n  colors as colorsObject,\n  getContrastRatio,\n  Theme,\n} from \"@material-ui/core\";\nimport { Color } from \"@material-ui/lab\";\n\nexport const defaultColors = {\n  primary: \"lightBlue\" as cssColor,\n  secondary: \"amber\" as cssColor,\n};\n\nexport const defaultShades = {\n  primary: \"500\" as shade,\n  secondary: \"700\" as shade,\n};\n\nexport type color =\n  | \"Red\"\n  | \"Pink\"\n  | \"Purple\"\n  | \"Deep Purple\"\n  | \"Indigo\"\n  | \"Blue\"\n  | \"Light Blue\"\n  | \"Cyan\"\n  | \"Teal\"\n  | \"Green\"\n  | \"Light Green\"\n  | \"Lime\"\n  | \"Yellow\"\n  | \"Amber\"\n  | \"Orange\"\n  | \"Deep Orange\";\n\nexport const colors: color[] = [\n  \"Red\",\n  \"Pink\",\n  \"Purple\",\n  \"Deep Purple\",\n  \"Indigo\",\n  \"Blue\",\n  \"Light Blue\",\n  \"Cyan\",\n  \"Teal\",\n  \"Green\",\n  \"Light Green\",\n  \"Lime\",\n  \"Yellow\",\n  \"Amber\",\n  \"Orange\",\n  \"Deep Orange\",\n];\n\nexport type cssColor =\n  | \"red\"\n  | \"pink\"\n  | \"purple\"\n  | \"deepPurple\"\n  | \"indigo\"\n  | \"blue\"\n  | \"lightBlue\"\n  | \"cyan\"\n  | \"teal\"\n  | \"green\"\n  | \"lightGreen\"\n  | \"lime\"\n  | \"yellow\"\n  | \"amber\"\n  | \"orange\"\n  | \"deepOrange\";\n\nexport const cssColors: cssColor[] = [\n  \"red\",\n  \"pink\",\n  \"purple\",\n  \"deepPurple\",\n  \"indigo\",\n  \"blue\",\n  \"lightBlue\",\n  \"cyan\",\n  \"teal\",\n  \"green\",\n  \"lightGreen\",\n  \"lime\",\n  \"yellow\",\n  \"amber\",\n  \"orange\",\n  \"deepOrange\",\n];\n\nexport type shade =\n  | \"50\"\n  | \"100\"\n  | \"200\"\n  | \"300\"\n  | \"400\"\n  | \"500\"\n  | \"600\"\n  | \"700\"\n  | \"800\"\n  | \"900\"\n  | \"A100\"\n  | \"A200\"\n  | \"A400\"\n  | \"A700\";\n\nexport const shades: shade[] = [\n  \"50\",\n  \"100\",\n  \"200\",\n  \"300\",\n  \"400\",\n  \"500\",\n  \"600\",\n  \"700\",\n  \"800\",\n  \"900\",\n  \"A100\",\n  \"A200\",\n  \"A400\",\n  \"A700\",\n];\n\nexport type scheme = \"primary\" | \"secondary\";\n\nexport const schemes: scheme[] = [\"primary\", \"secondary\"];\n\nexport const severities: Color[] = [\"success\", \"info\", \"error\", \"warning\"];\n\nexport const resetMessage = \"Colors have been reset\";\n\nexport const toCssColor = (color: color): string =>\n  color\n    .replace(\" \", \"\")\n    .replace(color.charAt(0), color.charAt(0).toLowerCase());\n\nexport const toColor = (cssColor: cssColor): string =>\n  cssColor.replace(/([A-Z])/g, \" $1\").replace(/^./, function (str) {\n    return str.toUpperCase();\n  });\n\nexport const isRgb = (string: string): boolean =>\n  /rgb\\([0-9]{1,3}\\s*,\\s*[0-9]{1,3}\\s*,\\s*[0-9]{1,3}\\)/i.test(string);\n\nexport const isHex = (string: string): boolean =>\n  /^#?([0-9a-f]{3})$|^#?([0-9a-f]){6}$/i.test(string);\n\nexport const getMuiColor = (color: cssColor, shade: shade): string => {\n  return colorsObject[color][shade];\n};\n\nexport const getTextColor = (theme: Theme, color: string) => {\n  const white = theme.palette.common.white;\n  const black = theme.palette.common.black;\n\n  return getContrastRatio(white, color) > getContrastRatio(black, color)\n    ? white\n    : black;\n};\n","export const SOURCE_CODE =\n  \"http://github.com/YashTotale/YashTotale.github.io.git\";\n\nexport const DEFAULT_PROJECT_ICON =\n  \"https://i.ibb.co/rcz3kRx/Default-Project.png\";\n\nexport const DEFAULT_TAG_ICON = \"https://i.ibb.co/NK41dGg/image.png\";\n\nexport const LINKEDIN_URL = \"https://linkedin.com/in/yash-totale\";\n\nexport const GITHUB_URL = \"https://github.com/YashTotale\";\n\nexport const EMAIL_URL = \"mailto:totaleyash@gmail.com\";\n\nexport const PROFILE_PIC = \"https://i.ibb.co/PCWCbc2/Bright-Profile-Pic.jpg\";\n\nexport const ABOUT_ME_BACKGROUND =\n  \"https://i.ibb.co/G3j8ZQD/68cacd73-8dc9-43fb-bb22-be6fd2f3ea18.jpg\";\n\nexport const DARK_LOGO = \"https://i.ibb.co/pJpLQfd/image.png\";\n\nexport const LIGHT_LOGO = \"https://i.ibb.co/dgN5wcv/Logo-Light.png\";\n","import { Color } from \"@material-ui/lab\";\nimport { cssColor, scheme, shade } from \"../../Utils/colors\";\n\n//Toggle Dark Mode\n\nexport interface ToggleDarkModePayload {\n  type: typeof TOGGLE_DARK_MODE;\n  payload: {};\n}\n\nexport const TOGGLE_DARK_MODE = \"TOGGLE_DARK_MODE\";\nexport const toggleDarkMode = (\n  isDarkMode?: boolean\n): ToggleDarkModePayload => ({\n  type: TOGGLE_DARK_MODE,\n  payload: {\n    isDarkMode,\n  },\n});\n\n//Toggle Nav Btns Menu\n\nexport interface ToggleNavBtnsMenuPayload {\n  type: typeof TOGGLE_NAV_BTNS_MENU;\n  payload: { isOpen?: boolean };\n}\n\nexport const TOGGLE_NAV_BTNS_MENU = \"TOGGLE_NAV_BTNS_MENU\";\nexport const toggleNavBtnsMenu = (\n  isOpen?: boolean\n): ToggleNavBtnsMenuPayload => ({\n  type: TOGGLE_NAV_BTNS_MENU,\n  payload: { isOpen },\n});\n\n//Change colors\n\nexport interface ChangeColorsPayload {\n  type: typeof CHANGE_COLORS;\n  payload: {\n    scheme: scheme;\n    color: cssColor;\n  };\n}\n\nexport const CHANGE_COLORS = \"CHANGE_COLORS\";\nexport const changeColors = (\n  scheme: scheme,\n  color: cssColor\n): ChangeColorsPayload => ({\n  type: CHANGE_COLORS,\n  payload: { scheme, color },\n});\n\n//Change shade\n\nexport interface ChangeShadePayload {\n  type: typeof CHANGE_SHADE;\n  payload: { shade: shade; scheme: scheme };\n}\n\nexport const CHANGE_SHADE = \"CHANGE_SHADE\";\nexport const changeShade = (\n  scheme: scheme,\n  shade: shade\n): ChangeShadePayload => ({\n  type: CHANGE_SHADE,\n  payload: { scheme, shade },\n});\n\n//Toggle Snackbar\n\nexport interface SetSnackbarMessagePayload {\n  type: typeof SET_SNACKBAR_MESSAGE;\n  payload: { message: string; severity: Color; color: string | null };\n}\n\nexport const SET_SNACKBAR_MESSAGE = \"SET_SNACKBAR_MESSAGE\";\nexport const setSnackbarMessage = (\n  message: string = \"\",\n  severity: Color,\n  color: string | null\n): SetSnackbarMessagePayload => ({\n  type: SET_SNACKBAR_MESSAGE,\n  payload: { message, severity, color },\n});\n\n//Handle Snackbar close\n\nexport interface HandleSnackbarClosePayload {\n  type: typeof HANDLE_SNACKBAR_CLOSE;\n  payload: {};\n}\n\nexport const HANDLE_SNACKBAR_CLOSE = \"HANDLE_SNACKBAR_CLOSE\";\nexport const handleSnackbarClose = (): HandleSnackbarClosePayload => ({\n  type: HANDLE_SNACKBAR_CLOSE,\n  payload: {},\n});\n","export {\n  TOGGLE_DARK_MODE,\n  toggleDarkMode,\n  TOGGLE_NAV_BTNS_MENU,\n  toggleNavBtnsMenu,\n  CHANGE_COLORS,\n  changeColors,\n  CHANGE_SHADE,\n  changeShade,\n  SET_SNACKBAR_MESSAGE,\n  setSnackbarMessage,\n  HANDLE_SNACKBAR_CLOSE,\n  handleSnackbarClose,\n} from \"./display.actions\";\nexport {\n  SET_CONTACT_NAME,\n  setContactName,\n  SET_CONTACT_MESSAGE,\n  setContactMessage,\n  SET_CONTACT_EMAIL,\n  setContactEmail,\n  SET_CONTACT_RATING,\n  setContactRating,\n  SET_CONTACT_BUGS,\n  setContactBugs,\n  SET_CONTACT_LOADING,\n  setContactLoading,\n  SET_CONTACT_SUCCESS,\n  setContactSuccess,\n  SET_CONTACT,\n  setContact,\n} from \"./contact.actions\";\n","export const FOOTER_HEIGHT = \"5rem\";\n\nexport const PROFILE_PIC_RATIO = 1.2776;\n\nexport const MONTHS = {\n  January: 0,\n  February: 1,\n  March: 2,\n  April: 3,\n  May: 4,\n  June: 5,\n  July: 6,\n  August: 7,\n  September: 8,\n  October: 9,\n  November: 10,\n  December: 11,\n};\n\nexport const EMAIL_REGEX = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\n"],"sourceRoot":""}