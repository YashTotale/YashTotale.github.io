{"version":3,"sources":["Components/Reusable/ListAction.tsx","Components/Custom/NavBar.tsx","Components/Reusable/ActionButton.tsx","Components/Reusable/TooltipBtn.tsx","Redux/thunks/display.thunks.ts"],"names":["ListItemComponent","component","children","to","onClick","href","className","ListItem","target","rel","button","Link","ListAction","props","ListItemIcon","icon","ListItemText","primary","title","useStyles","makeStyles","theme","tabs","justifyContent","flexGrow","navBtns","position","right","spacing","breakpoints","down","NavButtons","NavBar","classes","isSizeSmall","useMediaQuery","path","useLocation","pathname","split","tabIcons","Home","DeviceHub","BusinessCenter","currentTab","includes","AppBar","elevation","color","Toolbar","Tabs","value","map","tab","i","upperCase","toUpperCase","Tab","key","undefined","label","dispatch","useDispatch","useTheme","isMenuOpen","useSelector","getIsNavBtnsMenuOpen","isDarkMode","palette","type","btns","toggleDarkModeWMessage","Brightness7","Brightness4","Label","Palette","GitHub","SOURCE_CODE","TooltipBtn","Menu","toggleNavBtnsMenu","Drawer","anchor","open","onClose","List","ActionButton","IconButton","tooltipComponent","Tooltip","getState","toggleDarkMode","getIsDarkMode","setSnackbarMessage","changeColorWMessage","scheme","cssColor","shade","getPrimaryShade","getSecondaryShade","changeColors","capitalize","toColor","getMuiColor","changeShadeWMessage","changeShade","getPrimaryColor","getSecondaryColor","resetColors","schemes","forEach","defaultColors","defaultShades","resetMessage"],"mappings":"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","file":"static/js/15.7c91f47a.chunk.js","sourcesContent":["// React Imports\nimport React from \"react\";\n\n// Material UI Imports\n// import { makeStyles } from \"@material-ui/core/styles\";\nimport { ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\nimport {} from \"@material-ui/icons\";\nimport { Link } from \"react-router-dom\";\n\n// const useStyles = makeStyles((theme) => ({}));\n\nexport interface ListActionProps {\n  component: \"a\" | \"btn\" | \"link\";\n  icon: JSX.Element;\n  title: string;\n  href?: string;\n  onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  to?: string;\n  className?: string;\n}\n\nconst ListAction: React.FC<ListActionProps> = (props) => {\n  // const classes = useStyles();\n\n  return (\n    <ListItemComponent\n      {...props}\n      children={\n        <>\n          <ListItemIcon>{props.icon}</ListItemIcon>\n          <ListItemText primary={props.title} />\n        </>\n      }\n    />\n  );\n};\n\nconst ListItemComponent: React.FC<ListActionProps> = ({\n  component,\n  children,\n  to,\n  onClick,\n  href,\n  className,\n}) => {\n  switch (component) {\n    case \"a\": {\n      return (\n        <ListItem\n          children={children}\n          component=\"a\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={href}\n          className={className}\n          button\n        />\n      );\n    }\n    case \"btn\": {\n      return (\n        <ListItem\n          children={children}\n          onClick={onClick}\n          className={className}\n          button\n        />\n      );\n    }\n    case \"link\": {\n      return (\n        <ListItem\n          children={children}\n          component={Link}\n          to={`/${to}`}\n          className={className}\n          button\n        />\n      );\n    }\n  }\n};\n\nexport default ListAction;\n","//React Imports\nimport React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport TooltipBtn, { TooltipBtnProps } from \"../Reusable/TooltipBtn\";\nimport ListAction, { ListActionProps } from \"../Reusable/ListAction\";\nimport { SOURCE_CODE } from \"../../Utils/links\";\n\n//Redux Imports\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getIsNavBtnsMenuOpen } from \"../../Redux/selectors\";\nimport { toggleDarkModeWMessage } from \"../../Redux/thunks\";\nimport { toggleNavBtnsMenu } from \"../../Redux/actions\";\n\n//Material UI Imports\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport {\n  Brightness7,\n  Brightness4,\n  GitHub,\n  Menu as MenuButton,\n  Palette,\n  Home,\n  DeviceHub,\n  BusinessCenter,\n  Label,\n} from \"@material-ui/icons\";\nimport {\n  AppBar,\n  Toolbar,\n  Tabs,\n  Tab,\n  useTheme,\n  useMediaQuery,\n  Drawer,\n  List,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  tabs: {\n    \"& div\": {\n      justifyContent: \"center\",\n    },\n    flexGrow: 1,\n  },\n  navBtns: {\n    position: \"absolute\",\n    right: theme.spacing() * 3,\n    [theme.breakpoints.down(\"sm\")]: {\n      right: theme.spacing() * 2,\n    },\n  },\n}));\n\nconst NavBar: React.FC = (props) => {\n  const classes = useStyles();\n\n  const isSizeSmall = useMediaQuery<Theme>((theme) =>\n    theme.breakpoints.down(\"sm\")\n  );\n\n  const location = useLocation();\n  const path = location.pathname.split(\"/\")[1];\n  const tabs = [\"home\", \"projects\", \"experience\"];\n  const tabIcons = [<Home />, <DeviceHub />, <BusinessCenter />];\n  const excludedTabs = [\"colors\", \"tags\"];\n  const currentTab = tabs.includes(path)\n    ? path\n    : excludedTabs.includes(path)\n    ? false\n    : \"home\";\n\n  return (\n    <AppBar elevation={2} color=\"transparent\" position=\"static\">\n      <Toolbar>\n        <Tabs className={classes.tabs} value={currentTab}>\n          {tabs.map((tab, i) => {\n            const upperCase = tab.toUpperCase();\n            return (\n              <Tab\n                key={tab}\n                icon={isSizeSmall ? tabIcons[i] : undefined}\n                value={tab}\n                component={Link}\n                to={`/${tab}`}\n                label={isSizeSmall ? null : upperCase}\n              ></Tab>\n            );\n          })}\n        </Tabs>\n        <NavButtons isSizeSmall={isSizeSmall} />\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default NavBar;\n\ninterface NavButtonsProps {\n  isSizeSmall: boolean;\n}\n\nconst NavButtons: React.FC<NavButtonsProps> = ({ isSizeSmall }) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const theme = useTheme();\n\n  const isMenuOpen = useSelector(getIsNavBtnsMenuOpen);\n\n  const isDarkMode = theme.palette.type === \"dark\";\n\n  const btns = [\n    {\n      title: `Toggle ${isDarkMode ? \"Light\" : \"Dark\"} Theme`,\n      onClick: () => {\n        dispatch(toggleDarkModeWMessage());\n      },\n      component: \"btn\",\n      icon: isDarkMode ? <Brightness7 /> : <Brightness4 />,\n    },\n    {\n      title: \"Browse Tags\",\n      component: \"link\",\n      to: \"tags\",\n      icon: <Label />,\n    },\n    {\n      title: \"Edit Website Colors\",\n      to: \"colors\",\n      component: \"link\",\n      icon: <Palette />,\n    },\n    {\n      title: \"GitHub Repository\",\n      icon: <GitHub />,\n      component: \"a\",\n      href: SOURCE_CODE,\n    },\n  ];\n\n  return (\n    <div className={classes.navBtns}>\n      {!isSizeSmall ? (\n        <div>\n          {(btns as TooltipBtnProps[]).map((props, i) => (\n            <TooltipBtn key={i} {...props} />\n          ))}\n        </div>\n      ) : (\n        <>\n          <TooltipBtn\n            icon={<MenuButton />}\n            title=\"Open Menu\"\n            component=\"btn\"\n            onClick={() => dispatch(toggleNavBtnsMenu(true))}\n          />\n          <Drawer\n            anchor=\"right\"\n            open={isMenuOpen}\n            onClose={() => dispatch(toggleNavBtnsMenu(false))}\n          >\n            <List>\n              {(btns as ListActionProps[]).map((props, i) => (\n                <ListAction {...props} key={i} />\n              ))}\n            </List>\n          </Drawer>\n        </>\n      )}\n    </div>\n  );\n};\n","// React Imports\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Material UI Imports\n// import { makeStyles } from \"@material-ui/core/styles\";\nimport { IconButton } from \"@material-ui/core\";\nimport {} from \"@material-ui/icons\";\n\n// const useStyles = makeStyles((theme) => ({}));\n\ninterface ActionButtonProps {\n  icon: JSX.Element;\n  component: \"a\" | \"btn\" | \"link\";\n  onClick?: (e?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => any;\n  href?: string;\n  to?: string;\n  className?: string;\n}\n\nconst ActionButton: React.FC<ActionButtonProps> = ({\n  component,\n  href,\n  icon,\n  onClick,\n  to,\n  className,\n}) => {\n  // const classes = useStyles();\n  switch (component) {\n    case \"a\": {\n      return (\n        <IconButton\n          component=\"a\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={href}\n          className={className}\n        >\n          {icon}\n        </IconButton>\n      );\n    }\n    case \"btn\": {\n      return (\n        <IconButton onClick={onClick} className={className}>\n          {icon}\n        </IconButton>\n      );\n    }\n    case \"link\": {\n      return (\n        <IconButton component={Link} to={`/${to}`} className={className}>\n          {icon}\n        </IconButton>\n      );\n    }\n  }\n};\n\nexport default ActionButton;\n","// React Imports\nimport React from \"react\";\nimport ActionButton from \"./ActionButton\";\n\n// Material UI Imports\nimport { Tooltip } from \"@material-ui/core\";\n\nexport interface TooltipBtnProps {\n  title: string;\n  icon: JSX.Element;\n  component: \"a\" | \"btn\" | \"link\";\n  onClick?: (e?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => any;\n  href?: string;\n  to?: string;\n  className?: string;\n}\n\nconst TooltipBtn: React.FC<TooltipBtnProps> = (props) => {\n  const tooltipComponent = ActionButton(props) as React.ReactElement<any, any>;\n  const { title, className } = props;\n  return (\n    <Tooltip className={className} key={title} title={title}>\n      {tooltipComponent}\n    </Tooltip>\n  );\n};\n\nexport default TooltipBtn;\n","//React Imports\nimport { Dispatch } from \"react\";\nimport {\n  scheme,\n  shade,\n  defaultColors,\n  defaultShades,\n  schemes,\n  resetMessage,\n  cssColor,\n  getMuiColor,\n  toColor,\n} from \"../../Utils/colors\";\n\n//Redux Imports\nimport { RootStateOrAny } from \"react-redux\";\nimport {\n  changeShade,\n  setSnackbarMessage,\n  toggleDarkMode,\n  changeColors,\n} from \"../actions\";\nimport {\n  getIsDarkMode,\n  getPrimaryColor,\n  getPrimaryShade,\n  getSecondaryColor,\n  getSecondaryShade,\n} from \"../selectors\";\n\n//Material UI Imports\nimport { capitalize } from \"@material-ui/core\";\n\nexport const toggleDarkModeWMessage = () => (\n  dispatch: Dispatch<any>,\n  getState: () => RootStateOrAny\n) => {\n  dispatch(toggleDarkMode());\n  const theme = getIsDarkMode(getState()) ? \"Dark\" : \"Light\";\n  dispatch(setSnackbarMessage(`${theme} Theme set`, \"success\", null));\n};\n\nexport const changeColorWMessage = (scheme: scheme, cssColor: cssColor) => (\n  dispatch: Dispatch<any>,\n  getState: () => RootStateOrAny\n) => {\n  const shade =\n    scheme === \"primary\"\n      ? getPrimaryShade(getState())\n      : getSecondaryShade(getState());\n  dispatch(changeColors(scheme, cssColor));\n  dispatch(\n    setSnackbarMessage(\n      `${capitalize(scheme)} Color is now ${toColor(cssColor)}`,\n      \"success\",\n      getMuiColor(cssColor, shade)\n    )\n  );\n};\n\nexport const changeShadeWMessage = (scheme: scheme, shade: shade) => (\n  dispatch: Dispatch<any>,\n  getState: () => RootStateOrAny\n) => {\n  dispatch(changeShade(scheme, shade));\n  const cssColor =\n    scheme === \"primary\"\n      ? getPrimaryColor(getState())\n      : getSecondaryColor(getState());\n  dispatch(\n    setSnackbarMessage(\n      `${capitalize(scheme)} Shade is now ${shade}`,\n      \"success\",\n      getMuiColor(cssColor, shade)\n    )\n  );\n};\n\nexport const resetColors = () => (\n  dispatch: Dispatch<any>,\n  getState: () => RootStateOrAny\n) => {\n  schemes.forEach((scheme) => {\n    dispatch(changeColors(scheme, defaultColors[scheme]));\n    dispatch(changeShade(scheme, defaultShades[scheme]));\n    dispatch(setSnackbarMessage(resetMessage, \"success\", null));\n  });\n};\n"],"sourceRoot":""}