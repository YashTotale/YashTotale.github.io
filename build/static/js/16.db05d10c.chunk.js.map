{"version":3,"sources":["Pages/Colors.tsx","Redux/thunks/display.thunks.ts"],"names":["useStyles","makeStyles","theme","root","display","flexDirection","justifyContent","alignItems","header","margin","textAlign","schemes","flexWrap","scheme","width","schemeTitle","sliderDiv","marginTop","slider","colorPicker","resetDiv","marginBottom","ColorScheme","classes","dispatch","useDispatch","upperCaseScheme","capitalize","currentColor","useSelector","getPrimaryColor","getSecondaryColor","shade","getPrimaryShade","getSecondaryShade","className","variant","id","aria-labelledby","value","shades","indexOf","min","max","length","onChange","e","index","i","changeShadeWMessage","ColorPicker","colors","map","color","ColorBtn","key","useColorBtnStyles","white","palette","common","black","radio","padding","radioIcon","height","backgroundColor","radioIconSelected","border","isCurrentColor","type","checkIcon","fontSize","getTextColor","cssColor","toCssColor","colorHex","getMuiColor","title","checked","event","changeColorWMessage","name","icon","checkedIcon","Colors","props","onClick","resetColors","toggleDarkModeWMessage","getState","toggleDarkMode","getIsDarkMode","setSnackbarMessage","changeColors","toColor","changeShade","forEach","defaultColors","defaultShades","resetMessage"],"mappings":"mHAAA,4IA0CMA,EAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAEdC,OAAQ,CACNC,OAAQ,WACRC,UAAW,UAEbC,QAAS,CACPP,QAAS,OACTE,eAAgB,SAChBC,WAAY,SACZK,SAAU,QAEZC,OAAQ,CACNJ,OAAQ,WACRK,MAAO,SAETC,YAAa,CACXL,UAAW,UAEbM,UAAW,CACTZ,QAAS,OACTa,UAAW,QAEbC,OAAQ,CACNT,OAAQ,YAEVU,YAAa,CACXf,QAAS,OACTQ,SAAU,OACVN,eAAgB,SAChBG,OAAQ,YAEVW,SAAU,CACRhB,QAAS,OACTE,eAAgB,SAChBQ,MAAO,OACPO,aAAc,YAwCZC,EAA0C,SAAC,GAAgB,IAAdT,EAAa,EAAbA,OAC3CU,EAAUvB,IACVwB,EAAWC,cACXC,EAAkBC,YAAWd,GAC7Be,EAAeC,YACR,YAAXhB,EAAuBiB,IAAkBC,KAErCC,EAAeH,YACR,YAAXhB,EAAuBoB,IAAkBC,KAQ3C,OACE,yBAAKC,UAAWZ,EAAQV,QACtB,kBAAC,IAAD,CAAYsB,UAAWZ,EAAQR,YAAaqB,QAAQ,MACjDV,GAEH,yBAAKS,UAAWZ,EAAQP,WACtB,kBAAC,IAAD,CAAYqB,GAAG,SAAf,WACA,kBAAC,IAAD,CACEF,UAAWZ,EAAQL,OACnBoB,kBAAgB,QAChBC,MAAOC,IAAOC,QAAQT,GACtBU,IAAK,EACLC,IAAKH,IAAOI,OAAS,EACrBC,SAlBY,SAACC,EAA0BC,GAC7C,IAAMC,EAAqB,kBAAVD,EAAqBA,EAAQA,EAAM,GACpDvB,EAASyB,YAAoBpC,EAAQ2B,IAAOQ,QAkBxC,kBAAC,IAAD,KAAahB,IAEf,kBAACkB,EAAD,CAAatB,aAAcA,EAAcI,MAAOA,EAAOnB,OAAQA,MAW/DqC,EAA0C,SAAC,GAI1C,IAHLrC,EAGI,EAHJA,OACAmB,EAEI,EAFJA,MACAJ,EACI,EADJA,aAEML,EAAUvB,IAEhB,OACE,yBAAKmC,UAAWZ,EAAQJ,aACrBgC,IAAOC,KAAI,SAACC,GACX,OACE,kBAACC,EAAD,CACEC,IAAKF,EACLrB,MAAOA,EACPnB,OAAQA,EACRwC,MAAOA,EACPzB,aAAcA,SAapB4B,EAAoBvD,aAAsC,SAACC,GAC/D,IAAMuD,EAAQvD,EAAMwD,QAAQC,OAAOF,MAC7BG,EAAQ1D,EAAMwD,QAAQC,OAAOC,MACnC,MAAO,CACLC,MAAO,CACLC,QAAS,MACTrD,OAAQ,OAEVsD,UAAW,CACTjD,MAAO,GACPkD,OAAQ,GACRC,gBAAiB,qBAAGZ,QAEtBa,kBAAmB,CACjBC,OAAQ,qBAAGC,eACK,oBAC0B,SAAvBlE,EAAMwD,QAAQW,KAAkBZ,EAAQG,GACrD,QACNxD,QAAS,OACTE,eAAgB,SAChBC,WAAY,UAEd+D,UAAW,CACTC,SAAU,GACVlB,MAAO,gBAAGA,EAAH,EAAGA,MAAH,OAAemB,YAAatE,EAAOmD,SAY1CC,EAAoC,SAAC,GAKpC,IAJLD,EAII,EAJJA,MACAxC,EAGI,EAHJA,OACAmB,EAEI,EAFJA,MACAJ,EACI,EADJA,aAEMJ,EAAWC,cACXgD,EAAWC,YAAWrB,GAEtBsB,EAAWC,YAAYH,EAAUzC,GACjCT,EAAUiC,EAAkB,CAChCH,MAAOsB,EACPP,eAAgBK,IAAa7C,IAO/B,OACE,kBAAC,IAAD,CAASiD,MAAOxB,GACd,kBAAC,IAAD,CACElB,UAAWZ,EAAQsC,MACnBR,MAAM,UACNyB,QAASL,IAAa7C,EACtBiB,SAVc,SAACkC,GACnBvD,EAASwD,YAAoBnE,EAAQ4D,KAUjClC,MAAOkC,EACPQ,KAAMpE,EACNqE,KAAM,yBAAK/C,UAAWZ,EAAQwC,YAC9BoB,YACE,yBAAKhD,UAAS,UAAKZ,EAAQwC,UAAb,YAA0BxC,EAAQ2C,oBAC9C,kBAAC,IAAD,CAAO/B,UAAWZ,EAAQ+C,iBAQvBc,UAxLU,SAACC,GACxB,IAAM9D,EAAUvB,IACVwB,EAAWC,cAEjB,OACE,oCACE,kBAAC,IAAD,KACE,wDAEF,yBAAKU,UAAWZ,EAAQpB,MACtB,kBAAC,IAAD,CAAYgC,UAAWZ,EAAQf,OAAQ4B,QAAQ,MAA/C,4BAGA,yBAAKD,UAAWZ,EAAQZ,SACrBA,IAAQyC,KAAI,SAACvC,GAAD,OACX,kBAACS,EAAD,CAAaiC,IAAK1C,EAAQA,OAAQA,QAGtC,yBAAKsB,UAAWZ,EAAQH,UACtB,kBAAC,IAAD,CACEkE,QAAS,kBAAM9D,EAAS+D,gBACxBnD,QAAQ,YACRiB,MAAM,aAHR,6B,8MCzEGmC,EAAyB,kBAAM,SAC1ChE,EACAiE,GAEAjE,EAASkE,eACT,IAAMxF,EAAQyF,YAAcF,KAAc,OAAS,QACnDjE,EAASoE,YAAmB,GAAD,OAAI1F,EAAJ,cAAuB,UAAW,SAGlD8E,EAAsB,SAACnE,EAAgB4D,GAAjB,OAAwC,SACzEjD,EACAiE,GAEA,IAAMzD,EACO,YAAXnB,EACIoB,YAAgBwD,KAChBvD,YAAkBuD,KACxBjE,EAASqE,YAAahF,EAAQ4D,IAC9BjD,EACEoE,YAAmB,GAAD,OACbjE,YAAWd,GADE,yBACsBiF,YAAQrB,IAC9C,UACAG,YAAYH,EAAUzC,OAKfiB,EAAsB,SAACpC,EAAgBmB,GAAjB,OAAkC,SACnER,EACAiE,GAEAjE,EAASuE,YAAYlF,EAAQmB,IAC7B,IAAMyC,EACO,YAAX5D,EACIiB,YAAgB2D,KAChB1D,YAAkB0D,KACxBjE,EACEoE,YAAmB,GAAD,OACbjE,YAAWd,GADE,yBACsBmB,GACtC,UACA4C,YAAYH,EAAUzC,OAKfuD,EAAc,kBAAM,SAC/B/D,EACAiE,GAEA9E,IAAQqF,SAAQ,SAACnF,GACfW,EAASqE,YAAahF,EAAQoF,IAAcpF,KAC5CW,EAASuE,YAAYlF,EAAQqF,IAAcrF,KAC3CW,EAASoE,YAAmBO,IAAc,UAAW","file":"static/js/16.db05d10c.chunk.js","sourcesContent":["//React Imports\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  colors,\n  toCssColor,\n  shades,\n  scheme,\n  shade,\n  schemes,\n  cssColor,\n  color,\n  getMuiColor,\n  getTextColor,\n} from \"../Utils/colors\";\n\n//Redux Imports\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  getPrimaryColor,\n  getSecondaryColor,\n  getPrimaryShade,\n  getSecondaryShade,\n} from \"../Redux/selectors\";\nimport {\n  changeColorWMessage,\n  changeShadeWMessage,\n  resetColors,\n} from \"../Redux/thunks\";\n\n//Material UI Imports\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport {\n  capitalize,\n  Tooltip,\n  Slider,\n  Typography,\n  Button,\n  Radio,\n} from \"@material-ui/core\";\nimport { Check } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  header: {\n    margin: \"15px 0px\",\n    textAlign: \"center\",\n  },\n  schemes: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\",\n  },\n  scheme: {\n    margin: \"0px 20px\",\n    width: \"220px\",\n  },\n  schemeTitle: {\n    textAlign: \"center\",\n  },\n  sliderDiv: {\n    display: \"flex\",\n    marginTop: \"10px\",\n  },\n  slider: {\n    margin: \"0px 10px\",\n  },\n  colorPicker: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    margin: \"20px 0px\",\n  },\n  resetDiv: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    marginBottom: \"10px\",\n  },\n}));\n\nconst Colors: React.FC = (props) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Helmet>\n        <title>Colors - Yash Totale</title>\n      </Helmet>\n      <div className={classes.root}>\n        <Typography className={classes.header} variant=\"h4\">\n          Customize Website Colors\n        </Typography>\n        <div className={classes.schemes}>\n          {schemes.map((scheme) => (\n            <ColorScheme key={scheme} scheme={scheme} />\n          ))}\n        </div>\n        <div className={classes.resetDiv}>\n          <Button\n            onClick={() => dispatch(resetColors())}\n            variant=\"contained\"\n            color=\"secondary\"\n          >\n            Reset Default Colors\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n};\n\ninterface ColorSchemeProps {\n  scheme: scheme;\n}\n\nconst ColorScheme: React.FC<ColorSchemeProps> = ({ scheme }) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const upperCaseScheme = capitalize(scheme);\n  const currentColor = useSelector(\n    scheme === \"primary\" ? getPrimaryColor : getSecondaryColor\n  );\n  const shade: shade = useSelector(\n    scheme === \"primary\" ? getPrimaryShade : getSecondaryShade\n  );\n\n  const handleSlide = (e: React.ChangeEvent<{}>, index: number | number[]) => {\n    const i = typeof index === \"number\" ? index : index[0];\n    dispatch(changeShadeWMessage(scheme, shades[i]));\n  };\n\n  return (\n    <div className={classes.scheme}>\n      <Typography className={classes.schemeTitle} variant=\"h6\">\n        {upperCaseScheme}\n      </Typography>\n      <div className={classes.sliderDiv}>\n        <Typography id=\"shade\">Shade: </Typography>\n        <Slider\n          className={classes.slider}\n          aria-labelledby=\"shade\"\n          value={shades.indexOf(shade)}\n          min={0}\n          max={shades.length - 1}\n          onChange={handleSlide}\n        />\n        <Typography>{shade}</Typography>\n      </div>\n      <ColorPicker currentColor={currentColor} shade={shade} scheme={scheme} />\n    </div>\n  );\n};\n\ninterface ColorPickerProps {\n  scheme: scheme;\n  shade: shade;\n  currentColor: string;\n}\n\nconst ColorPicker: React.FC<ColorPickerProps> = ({\n  scheme,\n  shade,\n  currentColor,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.colorPicker}>\n      {colors.map((color) => {\n        return (\n          <ColorBtn\n            key={color}\n            shade={shade}\n            scheme={scheme}\n            color={color}\n            currentColor={currentColor}\n          ></ColorBtn>\n        );\n      })}\n    </div>\n  );\n};\n\ninterface ColorBtnStyleProps {\n  isCurrentColor: boolean;\n  color: string;\n}\n\nconst useColorBtnStyles = makeStyles<Theme, ColorBtnStyleProps>((theme) => {\n  const white = theme.palette.common.white;\n  const black = theme.palette.common.black;\n  return {\n    radio: {\n      padding: \"0px\",\n      margin: \"2px\",\n    },\n    radioIcon: {\n      width: 48,\n      height: 48,\n      backgroundColor: ({ color }) => color,\n    },\n    radioIconSelected: {\n      border: ({ isCurrentColor }) =>\n        isCurrentColor\n          ? `4px solid ${theme.palette.type === \"dark\" ? white : black}`\n          : \"none\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    checkIcon: {\n      fontSize: 30,\n      color: ({ color }) => getTextColor(theme, color),\n    },\n  };\n});\n\ninterface ColorBtnProps {\n  color: color;\n  scheme: scheme;\n  shade: shade;\n  currentColor: string;\n}\n\nconst ColorBtn: React.FC<ColorBtnProps> = ({\n  color,\n  scheme,\n  shade,\n  currentColor,\n}) => {\n  const dispatch = useDispatch();\n  const cssColor = toCssColor(color) as cssColor;\n\n  const colorHex = getMuiColor(cssColor, shade);\n  const classes = useColorBtnStyles({\n    color: colorHex,\n    isCurrentColor: cssColor === currentColor,\n  });\n\n  const handleClick = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    dispatch(changeColorWMessage(scheme, cssColor));\n  };\n\n  return (\n    <Tooltip title={color}>\n      <Radio\n        className={classes.radio}\n        color=\"default\"\n        checked={cssColor === currentColor}\n        onChange={handleClick}\n        value={cssColor}\n        name={scheme}\n        icon={<div className={classes.radioIcon} />}\n        checkedIcon={\n          <div className={`${classes.radioIcon} ${classes.radioIconSelected}`}>\n            <Check className={classes.checkIcon} />\n          </div>\n        }\n      />\n    </Tooltip>\n  );\n};\n\nexport default Colors;\n","//React Imports\nimport { Dispatch } from \"react\";\nimport {\n  scheme,\n  shade,\n  defaultColors,\n  defaultShades,\n  schemes,\n  resetMessage,\n  cssColor,\n  getMuiColor,\n  toColor,\n} from \"../../Utils/colors\";\n\n//Redux Imports\nimport { RootStateOrAny } from \"react-redux\";\nimport {\n  changeShade,\n  setSnackbarMessage,\n  toggleDarkMode,\n  changeColors,\n} from \"../actions\";\nimport {\n  getIsDarkMode,\n  getPrimaryColor,\n  getPrimaryShade,\n  getSecondaryColor,\n  getSecondaryShade,\n} from \"../selectors\";\n\n//Material UI Imports\nimport { capitalize } from \"@material-ui/core\";\n\nexport const toggleDarkModeWMessage = () => (\n  dispatch: Dispatch<any>,\n  getState: () => RootStateOrAny\n) => {\n  dispatch(toggleDarkMode());\n  const theme = getIsDarkMode(getState()) ? \"Dark\" : \"Light\";\n  dispatch(setSnackbarMessage(`${theme} Theme set`, \"success\", null));\n};\n\nexport const changeColorWMessage = (scheme: scheme, cssColor: cssColor) => (\n  dispatch: Dispatch<any>,\n  getState: () => RootStateOrAny\n) => {\n  const shade =\n    scheme === \"primary\"\n      ? getPrimaryShade(getState())\n      : getSecondaryShade(getState());\n  dispatch(changeColors(scheme, cssColor));\n  dispatch(\n    setSnackbarMessage(\n      `${capitalize(scheme)} Color is now ${toColor(cssColor)}`,\n      \"success\",\n      getMuiColor(cssColor, shade)\n    )\n  );\n};\n\nexport const changeShadeWMessage = (scheme: scheme, shade: shade) => (\n  dispatch: Dispatch<any>,\n  getState: () => RootStateOrAny\n) => {\n  dispatch(changeShade(scheme, shade));\n  const cssColor =\n    scheme === \"primary\"\n      ? getPrimaryColor(getState())\n      : getSecondaryColor(getState());\n  dispatch(\n    setSnackbarMessage(\n      `${capitalize(scheme)} Shade is now ${shade}`,\n      \"success\",\n      getMuiColor(cssColor, shade)\n    )\n  );\n};\n\nexport const resetColors = () => (\n  dispatch: Dispatch<any>,\n  getState: () => RootStateOrAny\n) => {\n  schemes.forEach((scheme) => {\n    dispatch(changeColors(scheme, defaultColors[scheme]));\n    dispatch(changeShade(scheme, defaultShades[scheme]));\n    dispatch(setSnackbarMessage(resetMessage, \"success\", null));\n  });\n};\n"],"sourceRoot":""}