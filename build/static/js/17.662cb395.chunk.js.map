{"version":3,"sources":["Components/Custom/SnackBar.tsx"],"names":["useStyles","makeStyles","theme","alert","color","backgroundColor","getTextColor","SnackBar","dispatch","useDispatch","handleClose","event","reason","handleSnackbarClose","isOpen","useSelector","getIsSnackbarOpen","message","getSnackbarMessage","severity","getSnackbarSeverity","getSnackbarColor","classes","autoHideDuration","key","onClose","open","className","variant"],"mappings":"mHAAA,sFA2BMA,EAAYC,aAA8B,SAACC,GAAD,MAAY,CAC1DC,MAAO,gBAAGC,EAAH,EAAGA,MAAH,MAAgB,CACrBC,gBAAiBD,GAAgB,OACjCA,MAAOA,EAAQE,YAAaJ,EAAOE,GAAS,aA6CjCG,UAvC2B,WACxC,IAAMC,EAAWC,cAEXC,EAAc,SAClBC,EACAC,GAEe,cAAXA,GAAwBJ,EAASK,gBAGjCC,EAASC,YAAYC,KACrBC,EAAUF,YAAYG,KACtBC,EAAWJ,YAAYK,KACvBhB,EAAQW,YAAYM,KAEpBC,EAAUtB,EAAU,CACxBI,UAGF,OACE,kBAAC,IAAD,CACEmB,iBAAkB,IAClBC,IAAKP,EACLQ,QAASf,EACTgB,KAAMZ,EACNG,QAASA,GAET,kBAAC,IAAD,CACEU,UAAWL,EAAQnB,MACnByB,QAAQ,SACRT,SAAUA,EACVM,QAASf,GAERO","file":"static/js/17.662cb395.chunk.js","sourcesContent":["// React Imports\nimport React from \"react\";\nimport { getTextColor } from \"../../Utils/colors\";\n\n// Redux Imports\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getIsSnackbarOpen,\n  getSnackbarColor,\n  getSnackbarMessage,\n  getSnackbarSeverity,\n} from \"../../Redux/selectors/display.selectors\";\nimport { handleSnackbarClose } from \"../../Redux/actions\";\n\n// Material UI Imports\nimport {\n  Snackbar,\n  SnackbarCloseReason,\n  makeStyles,\n  Theme,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\n\ninterface StyleProps {\n  color: string | null;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps>((theme) => ({\n  alert: ({ color }) => ({\n    backgroundColor: color ? color : \"auto\",\n    color: color ? getTextColor(theme, color) : \"auto\",\n  }),\n}));\n\ninterface SnackBarProps {}\n\nconst SnackBar: React.FC<SnackBarProps> = () => {\n  const dispatch = useDispatch();\n\n  const handleClose = (\n    event: React.SyntheticEvent<any, Event>,\n    reason?: SnackbarCloseReason\n  ) => {\n    if (reason !== \"clickaway\") dispatch(handleSnackbarClose());\n  };\n\n  const isOpen = useSelector(getIsSnackbarOpen);\n  const message = useSelector(getSnackbarMessage);\n  const severity = useSelector(getSnackbarSeverity);\n  const color = useSelector(getSnackbarColor);\n\n  const classes = useStyles({\n    color,\n  });\n\n  return (\n    <Snackbar\n      autoHideDuration={3000}\n      key={message}\n      onClose={handleClose}\n      open={isOpen}\n      message={message}\n    >\n      <Alert\n        className={classes.alert}\n        variant=\"filled\"\n        severity={severity}\n        onClose={handleClose}\n      >\n        {message}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default SnackBar;\n"],"sourceRoot":""}